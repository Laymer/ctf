def SAVE_TO_INT(_SAVE):
    KEY=_SAVE[2001]
    KEY=KEY.decode("utf-8")
    VALUE=_SAVE[2002]
    VALUE=VALUE.decode("utf-8")
    VALUE=int(VALUE)
    _SAVE[KEY]=VALUE
    return

def O0O000000OO0OOO0O(OO000OO00000OO0OO):
    OOOO000O000OO0O0O=2001
    OO0OO0OOOOOOO0OO0=2002

    O0O000O000OOO0OO0=OO000OO00000OO0OO[2001]
    O0O000O000OOO0OO0=O0O000O000OOO0OO0.decode("utf-8")

    O0O0OO00OOO0O0OO0=OO000OO00000OO0OO[2002]
    O0O0OO00OOO0O0OO0=O0O0OO00OOO0O0OO0.decode("utf-8")

    O0O0OO00OOO0O0OO0=OO000OO00000OO0OO[O0O0OO00OOO0O0OO0]
    OO000OO00000OO0OO[O0O000O000OOO0OO0]=O0O0OO00OOO0O0OO0
    return

def GET_FLAG_BY_IDX(OO0OO0O0O0OOOO0O0):
    arg1=OO0OO0O0O0OOOO0O0[2001]
    arg1=arg1.decode("utf-8")
    arg2=OO0OO0O0O0OOOO0O0[2002]
    arg2=arg2.decode("utf-8")
    arg2=OO0OO0O0O0OOOO0O0[arg2] # FLAG

    O0000000OOOO0OOO0=OO0OO0O0O0OOOO0O0[2003]
    O0000000OOOO0OOO0=O0000000OOOO0OOO0.decode("utf-8")

    if O0000000OOOO0OOO0.isdigit():
        O0000000OOOO0OOO0=int(O0000000OOOO0OOO0)
    else:
        O0000000OOOO0OOO0=OO0OO0O0O0OOOO0O0[O0000000OOOO0OOO0]

    OO0OOOOO000OO0OOO=arg2[O0000000OOOO0OOO0]

    print("SAVE[{}] = FLAG[{}]".format(arg1, O0000000OOOO0OOO0))
    OO0OO0O0O0OOOO0O0[arg1]=OO0OOOOO000OO0OOO
    return
def O0O0O0000O00OO00O(O000O000O00000O0O):
    OO0OO0OO00O0OO0OO=2001
    OO0OO0OOO000000O0=2002
    OOOO00OOO0OO00O00=2003
    O0O0O0OO0O0O00O00=2004
    O00000O000O0000OO=O000O000O00000O0O[OO0OO0OO00O0OO0OO]
    O00000O000O0000OO=O00000O000O0000OO.decode("utf-8")
    O0O00000O00OOO000=O000O000O00000O0O[OO0OO0OOO000000O0]
    O0O00000O00OOO000=O0O00000O00OOO000.decode("utf-8")
    OO0O00O0OO0OO0000=O000O000O00000O0O[OOOO00OOO0OO00O00]
    OO0O00O0OO0OO0000=OO0O00O0OO0OO0000.decode("utf-8")
    if OO0O00O0OO0OO0000.isdigit():
        OO0O00O0OO0OO0000=int(OO0O00O0OO0OO0000)
    else:
        OO0O00O0OO0OO0000=O000O000O00000O0O[OO0O00O0OO0OO0000]
    OO0000O00O00OO00O=O000O000O00000O0O[O0O0O0OO0O0O00O00]
    OO0000O00O00OO00O=OO0000O00O00OO00O.decode("utf-8")
    if OO0000O00O00OO00O.isdigit():
        OO0000O00O00OO00O=int(OO0000O00O00OO00O)
    else:
        OO0000O00O00OO00O=O000O000O00000O0O[OO0000O00O00OO00O]
    O0O0000O000O0OOOO=O0O00000O00OOO000[OO0O00O0OO0OO0000:OO0000O00O00OO00O]
    O000O000O00000O0O[O00000O000O0000OO]=O0O0000O000O0OOOO
    return

def SAVE_DICT(O00OOO0OOOOOO0OOO):
    O0OOOOOOOO0OOO0O0=O00OOO0OOOOOO0OOO[2001]
    O0OOOOOOOO0OOO0O0=O0OOOOOOOO0OOO0O0.decode("utf-8")

    OOO00O0OOO0OO0O00=O00OOO0OOOOOO0OOO[2002]
    OOO00O0OOO0OO0O00=OOO00O0OOO0OO0O00.decode("utf-8")

    if OOO00O0OOO0OO0O00.isdigit():
        OOO00O0OOO0OO0O00=int(OOO00O0OOO0OO0O00)
    else:
        OOO00O0OOO0OO0O00=O00OOO0OOOOOO0OOO[OOO00O0OOO0OO0O00]

    # 두번 째 인자 == key 

    OOO0O000O0OOOO000=O00OOO0OOOOOO0OOO[2003]
    OOO0O000O0OOOO000=OOO0O000O0OOOO000.decode("utf-8")

    if OOO0O000O0OOOO000.isdigit():
        OOO0O000O0OOOO000=int(OOO0O000O0OOOO000)
    else:
        OOO0O000O0OOOO000=O00OOO0OOOOOO0OOO[OOO0O000O0OOOO000]

    # 세번 쨰 인자 == ?

    # [arg1][arg2] = arg3

    O0000OOO0OOO000O0=O00OOO0OOOOOO0OOO[O0OOOOOOOO0OOO0O0]

    O0000OOO0OOO000O0[OOO00O0OOO0OO0O00]=OOO0O000O0OOOO000
    return

def PLUS(OO0O00000O00OO0O0):
    OOO0O0O00OOO0O0O0=2001
    O0000000O0OOO000O=2002
    OOOOO000OOO000000=2003
    OOO000O0O00O0OOOO=OO0O00000O00OO0O0[OOO0O0O00OOO0O0O0]
    OOO000O0O00O0OOOO=OOO000O0O00O0OOOO.decode("utf-8")
    OOO0O0OOOO0O0OOOO=OO0O00000O00OO0O0[O0000000O0OOO000O]
    OOO0O0OOOO0O0OOOO=OOO0O0OOOO0O0OOOO.decode("utf-8")
    if OOO0O0OOOO0O0OOOO.isdigit():
        OOO0O0OOOO0O0OOOO=int(OOO0O0OOOO0O0OOOO)
    else:
        OOO0O0OOOO0O0OOOO=OO0O00000O00OO0O0[OOO0O0OOOO0O0OOOO]
    O0O000O00OO000O00=OO0O00000O00OO0O0[OOOOO000OOO000000]
    O0O000O00OO000O00=O0O000O00OO000O00.decode("utf-8")
    if O0O000O00OO000O00.isdigit():
        O0O000O00OO000O00=int(O0O000O00OO000O00)
    else:
        O0O000O00OO000O00=OO0O00000O00OO0O0[O0O000O00OO000O00]
    OOOOO0OO000OO0000=OOO0O0OOOO0O0OOOO+O0O000O00OO000O00

    print("PLUS {} + {}".format(hex(OOO0O0OOOO0O0OOOO), hex(O0O000O00OO000O00)))
    OO0O00000O00OO0O0[OOO000O0O00O0OOOO]=OOOOO0OO000OO0000
    return

def XOR_SAVE(_SAVE):
    O00O0OOO00O00OOO0=_SAVE[2001]
    O00O0OOO00O00OOO0=O00O0OOO00O00OOO0.decode("utf-8")
    O0OO0OOOOO0OOOOO0=_SAVE[2002]
    O0OO0OOOOO0OOOOO0=O0OO0OOOOO0OOOOO0.decode("utf-8")


    if O0OO0OOOOO0OOOOO0.isdigit():
        O0OO0OOOOO0OOOOO0=int(O0OO0OOOOO0OOOOO0)
    else:
        O0OO0OOOOO0OOOOO0=_SAVE[O0OO0OOOOO0OOOOO0]

    OOO0OO000OOO0O0OO=_SAVE[2003]
    OOO0OO000OOO0O0OO=OOO0OO000OOO0O0OO.decode("utf-8")

    if OOO0OO000OOO0O0OO.isdigit():
        OOO0OO000OOO0O0OO=int(OOO0OO000OOO0O0OO)
    else:
        OOO0OO000OOO0O0OO=_SAVE[OOO0OO000OOO0O0OO]

    # print('XOR {} ^ {} ==> {}'.format(O0OO0OOOOO0OOOOO0, OOO0OO000OOO0O0OO, O00O0OOO00O00OOO0))
    print("XOR {} + {}".format(hex(O0OO0OOOOO0OOOOO0), hex(OOO0OO000OOO0O0OO)))
    xor_result=O0OO0OOOOO0OOOOO0^OOO0OO000OOO0O0OO

    _SAVE[O00O0OOO00O00OOO0]=xor_result
    return


def AND(OOO00O0O000OO00O0):
    O0O0OOO00000OO00O=2001
    O0O00000O0O00OO00=2002
    OOOO0OOOOO0O00000=2003
    O0000O00OO0O0O0OO=OOO00O0O000OO00O0[O0O0OOO00000OO00O]
    O0000O00OO0O0O0OO=O0000O00OO0O0O0OO.decode("utf-8")
    OO0O0O0OO00O00OO0=OOO00O0O000OO00O0[O0O00000O0O00OO00]
    OO0O0O0OO00O00OO0=OO0O0O0OO00O00OO0.decode("utf-8")
    if OO0O0O0OO00O00OO0.isdigit():
        OO0O0O0OO00O00OO0=int(OO0O0O0OO00O00OO0)
    else:
        OO0O0O0OO00O00OO0=OOO00O0O000OO00O0[OO0O0O0OO00O00OO0]
    O00OO000O00O0OO00=OOO00O0O000OO00O0[OOOO0OOOOO0O00000]
    O00OO000O00O0OO00=O00OO000O00O0OO00.decode("utf-8")
    if O00OO000O00O0OO00.isdigit():
        O00OO000O00O0OO00=int(O00OO000O00O0OO00)
    else:
        O00OO000O00O0OO00=OOO00O0O000OO00O0[O00OO000O00O0OO00]
    O000O0O00O00OOOO0=OO0O0O0OO00O00OO0&O00OO000O00O0OO00
    print("AND {} + {}".format(hex(OO0O0O0OO00O00OO0), hex(O00OO000O00O0OO00)))
    OOO00O0O000OO00O0[O0000O00OO0O0O0OO]=O000O0O00O00OOOO0
    return
def OR(OOOOO0O00O0O0O0O0):
    O0OOOOO0O000O0O0O=2001
    O0O0OOOO000O00O0O=2002
    OO00O0OOOO00OOOO0=2003
    O0OO00OO00OOOOOO0=OOOOO0O00O0O0O0O0[O0OOOOO0O000O0O0O]
    O0OO00OO00OOOOOO0=O0OO00OO00OOOOOO0.decode("utf-8")
    O00OOO00O0000O00O=OOOOO0O00O0O0O0O0[O0O0OOOO000O00O0O]
    O00OOO00O0000O00O=O00OOO00O0000O00O.decode("utf-8")
    if O00OOO00O0000O00O.isdigit():
        O00OOO00O0000O00O=int(O00OOO00O0000O00O)
    else:
        O00OOO00O0000O00O=OOOOO0O00O0O0O0O0[O00OOO00O0000O00O]
    O0000O000000OO000=OOOOO0O00O0O0O0O0[OO00O0OOOO00OOOO0]
    O0000O000000OO000=O0000O000000OO000.decode("utf-8")
    if O0000O000000OO000.isdigit():
        O0000O000000OO000=int(O0000O000000OO000)
    else:
        O0000O000000OO000=OOOOO0O00O0O0O0O0[O0000O000000OO000]
    O0OO0OO0000000O00=O00OOO00O0000O00O|O0000O000000OO000
    print("OR {} | {}".format(hex(O00OOO00O0000O00O), hex(O0000O000000OO000)))
    OOOOO0O00O0O0O0O0[O0OO00OO00OOOOOO0]=O0OO0OO0000000O00
    return

def RSHIFT(O00OO0OO00O0OOO00):
    O0OO0O000OOOOOO00=2001
    O0000O0OO00OO0000=2002
    OOOOOO00OOOO0O0O0=2003
    O0O0O0OO000O0OO0O=O00OO0OO00O0OOO00[O0OO0O000OOOOOO00]
    O0O0O0OO000O0OO0O=O0O0O0OO000O0OO0O.decode("utf-8")
    O0OOO0OOOOO00O0OO=O00OO0OO00O0OOO00[O0000O0OO00OO0000]
    O0OOO0OOOOO00O0OO=O0OOO0OOOOO00O0OO.decode("utf-8")
    if O0OOO0OOOOO00O0OO.isdigit():
        O0OOO0OOOOO00O0OO=int(O0OOO0OOOOO00O0OO)
    else:
        O0OOO0OOOOO00O0OO=O00OO0OO00O0OOO00[O0OOO0OOOOO00O0OO]
    O000OO00O0OOO00OO=O00OO0OO00O0OOO00[OOOOOO00OOOO0O0O0]
    O000OO00O0OOO00OO=O000OO00O0OOO00OO.decode("utf-8")
    if O000OO00O0OOO00OO.isdigit():
        O000OO00O0OOO00OO=int(O000OO00O0OOO00OO)
    else:
        O000OO00O0OOO00OO=O00OO0OO00O0OOO00[O000OO00O0OOO00OO]
    OO0OO0OOOO00O0O0O=O0OOO0OOOOO00O0OO >>O000OO00O0OOO00OO

    print("RSHIFT {} >> {}".format(hex(O0OOO0OOOOO00O0OO), hex(O000OO00O0OOO00OO)))
    O00OO0OO00O0OOO00[O0O0O0OO000O0OO0O]=OO0OO0OOOO00O0O0O
    return

def LSHIFT(O0OO00OO000OOO0O0):
    OO00O00O0O0O00OO0=2001
    OOOOOO0O0OO00OOO0=2002
    OO0O00OO0000O0O0O=2003
    O000O00O0OOOO0000=O0OO00OO000OOO0O0[OO00O00O0O0O00OO0]
    O000O00O0OOOO0000=O000O00O0OOOO0000.decode("utf-8")
    OOOO0OOOOO000OOOO=O0OO00OO000OOO0O0[OOOOOO0O0OO00OOO0]
    OOOO0OOOOO000OOOO=OOOO0OOOOO000OOOO.decode("utf-8")
    if OOOO0OOOOO000OOOO.isdigit():
        OOOO0OOOOO000OOOO=int(OOOO0OOOOO000OOOO)
    else:
        OOOO0OOOOO000OOOO=O0OO00OO000OOO0O0[OOOO0OOOOO000OOOO]
    OOO0OO00OO0O00OOO=O0OO00OO000OOO0O0[OO0O00OO0000O0O0O]
    OOO0OO00OO0O00OOO=OOO0OO00OO0O00OOO.decode("utf-8")
    if OOO0OO00OO0O00OOO.isdigit():
        OOO0OO00OO0O00OOO=int(OOO0OO00OO0O00OOO)
    else:
        OOO0OO00OO0O00OOO=O0OO00OO000OOO0O0[OOO0OO00OO0O00OOO]
    OO00OOOOO0OOOO0OO=OOOO0OOOOO000OOOO<<OOO0OO00OO0O00OOO

    print("LSHIFT {} >> {}".format(hex(OOOO0OOOOO000OOOO), hex(OOO0OO00OO0O00OOO)))
    O0OO00OO000OOO0O0[O000O00O0OOOO0000]=OO00OOOOO0OOOO0OO
    return

def CALL_PYTHON_FUNCTION(OO00OOO000OO00O0O):
    O000OO0OOO0OO0000=2001
    O0OOO0O0OO0O0OO0O=2002
    OOOOO0OO0OOOOO000=1001
    OOO0OOO00O00O0OOO=OO00OOO000OO00O0O[O000OO0OOO0OO0000]
    OOO0OOO00O00O0OOO=OOO0OOO00O00O0OOO.decode("utf-8")
    O0O000O00O0O0000O=OO00OOO000OO00O0O[O0OOO0O0OO0O0OO0O]
    O0O000O00O0O0000O=O0O000O00O0O0000O.decode("utf-8")
    if O0O000O00O0O0000O.isdigit():
        O0O000O00O0O0000O=int(O0O000O00O0O0000O)
    else:
        O0O000O00O0O0000O=OO00OOO000OO00O0O[O0O000O00O0O0000O]

    print('PYTHON FUNCTION -> ', OOO0OOO00O00O0OOO)
    OO0OOOO000O00OOO0=eval(OOO0OOO00O00O0OOO)
    O00O0OO00000OOO0O=OO0OOOO000O00OOO0(O0O000O00O0O0000O)
    OO00OOO000OO00O0O[OOOOO0OO0OOOOO000]=O00O0OO00000OOO0O
    return

def O0O000000OO00O00O(OOO0OO0000OO0O0OO):
    O00OO0O0O000OOO00=2001
    O0OO0O0OO0OOOO0O0=1001
    O00O0OOOO00O00O00=OOO0OO0000OO0O0OO[O00OO0O0O000OOO00]
    O00O0OOOO00O00O00=O00O0OOOO00O00O00.decode("utf-8")
    print('eval', O00O0OOOO00O00O00)
    O00OOOO0OOO0O00OO=eval(O00O0OOOO00O00O00)
    O0O00OOO000OO0OO0=O00OOOO0OOO0O00OO()
    OOO0OO0000OO0O0OO[O0OO0O0OO0OOOO0O0]=O0O00OOO000OO0OO0
    return
def O00OO0000OO00OO0O(OOO0OOOO00OO0O000):
    OOO0OO0000OO0O0O0=2001
    O000O0O0O0O00000O=1001
    O00O0OO00O00OOOO0=OOO0OOOO00OO0O000[OOO0OO0000OO0O0O0]
    O00O0OO00O00OOOO0=O00O0OO00O00OOOO0.decode("utf-8")
    if O00O0OO00O00OOOO0.isdigit():
        O00O0OO00O00OOOO0=int(O00O0OO00O00OOOO0)
    else:
        O00O0OO00O00OOOO0=OOO0OOOO00OO0O000[O00O0OO00O00OOOO0]
    OOO0OOOO00OO0O000[O000O0O0O0O00000O]=O00O0OO00O00OOOO0
    return
def SAVE_EVAL_RETURN(O0OOOO00000O00OO0):
    O00O0000O0OO00OO0=2001
    O00O000OO0O0000OO=1001
    O0O0O0O0OOOOOO0OO=O0OOOO00000O00OO0[O00O0000O0OO00OO0]
    O0O0O0O0OOOOOO0OO=O0O0O0O0OOOOOO0OO.decode("utf-8")
    OOOOO000OO0OOOOOO=O0OOOO00000O00OO0[O00O000OO0O0000OO]
    O0OOOO00000O00OO0[O0O0O0O0OOOOOO0OO]=OOOOO000OO0OOOOOO
    return

def JUMP_EQUAL(OO000000OO0000000):
    OO0O00O0OOO0O0O00=2001
    OO0000000O0000OOO=2002
    O0O0OOOOOO0O00O00=2003
    O0OOO0OO0OOO00OO0=1000
    O0000O0OOO0O0OOOO=OO000000OO0000000[OO0O00O0OOO0O0O00]
    O0000O0OOO0O0OOOO=O0000O0OOO0O0OOOO.decode("utf-8")
    O0000O0OOO0O0OOOO=int(O0000O0OOO0O0OOOO)
    OO0O00OO0O0OO0000=OO000000OO0000000[OO0000000O0000OOO]
    OO0O00OO0O0OO0000=OO0O00OO0O0OO0000.decode("utf-8")
    if OO0O00OO0O0OO0000.isdigit():
        OO0O00OO0O0OO0000=int(OO0O00OO0O0OO0000)
    else:
        OO0O00OO0O0OO0000=OO000000OO0000000[OO0O00OO0O0OO0000]
    OOO00OOOOO0000OO0=OO000000OO0000000[O0O0OOOOOO0O00O00]
    OOO00OOOOO0000OO0=OOO00OOOOO0000OO0.decode("utf-8")
    if OOO00OOOOO0000OO0.isdigit():
        OOO00OOOOO0000OO0=int(OOO00OOOOO0000OO0)
    else:
        OOO00OOOOO0000OO0=OO000000OO0000000[OOO00OOOOO0000OO0]

    if OO0O00OO0O0OO0000==OOO00OOOOO0000OO0:
        OO000000OO0000000[O0OOO0OO0OOO00OO0]=O0000O0OOO0O0OOOO
    return

def JUMP_NOT_EQAUL(SAVE_):
    O0O0O0OO0OOOO0O0O=SAVE_[2001]
    O0O0O0OO0OOOO0O0O=O0O0O0OO0OOOO0O0O.decode("utf-8")
    O0O0O0OO0OOOO0O0O=int(O0O0O0OO0OOOO0O0O)

    O0OO000O0O0000O00=SAVE_[2002]
    O0OO000O0O0000O00=O0OO000O0O0000O00.decode("utf-8")
    if O0OO000O0O0000O00.isdigit():
        O0OO000O0O0000O00=int(O0OO000O0O0000O00)
    else:
        O0OO000O0O0000O00=SAVE_[O0OO000O0O0000O00]
    OO00O000OOO0OOO00=SAVE_[2003]
    OO00O000OOO0OOO00=OO00O000OOO0OOO00.decode("utf-8")

    if OO00O000OOO0OOO00.isdigit():
        OO00O000OOO0OOO00=int(OO00O000OOO0OOO00)
    else:
        print("HERE", OO00O000OOO0OOO00, SAVE_[OO00O000OOO0OOO00])
        OO00O000OOO0OOO00=SAVE_[OO00O000OOO0OOO00]


    print("COMPARE1", O0OO000O0O0000O00 , OO00O000OOO0OOO00)
    if O0OO000O0O0000O00 != OO00O000OOO0OOO00:
        SAVE_[1000]=O0O0O0OO0OOOO0O0O
    return

def JUMP_RIGHT_GREATER(SAVE_):
    OOO0OO0OOO0OO0O00=2001
    OO00OOOO0OOOOOOOO=2002
    OOOO00OO0OOOO00O0=2003
    OOOOO0O0OOO0OOO0O=1000
    OO0OOO0O0O0000000=SAVE_[OOO0OO0OOO0OO0O00]
    OO0OOO0O0O0000000=OO0OOO0O0O0000000.decode("utf-8")
    OO0OOO0O0O0000000=int(OO0OOO0O0O0000000)
    O0OOO0O000O00OO0O=SAVE_[OO00OOOO0OOOOOOOO]
    O0OOO0O000O00OO0O=O0OOO0O000O00OO0O.decode("utf-8")
    if O0OOO0O000O00OO0O.isdigit():
        O0OOO0O000O00OO0O=int(O0OOO0O000O00OO0O)
    else:
        O0OOO0O000O00OO0O=SAVE_[O0OOO0O000O00OO0O]
    OOO0OOO00O0000O0O=SAVE_[OOOO00OO0OOOO00O0]
    OOO0OOO00O0000O0O=OOO0OOO00O0000O0O.decode("utf-8")
    if OOO0OOO00O0000O0O.isdigit():
        OOO0OOO00O0000O0O=int(OOO0OOO00O0000O0O)
    else:
        OOO0OOO00O0000O0O=SAVE_[OOO0OOO00O0000O0O]

    print("COMPARE2")
    if O0OOO0O000O00OO0O<OOO0OOO00O0000O0O:
        SAVE_[OOOOO0O0OOO0OOO0O]=OO0OOO0O0O0000000
    return

def JUMP_LEFT_GREATER_EQUAL(SAVE_):
    O00OO0OO0OO0OO00O=2001
    O00O00O0OOO0OOO00=2002
    OO0O000O00O0000O0=2003
    OO00O0O0O00000OO0=1000

    OO000OOOO00OO0OOO=SAVE_[O00OO0OO0OO0OO00O]
    OO000OOOO00OO0OOO=OO000OOOO00OO0OOO.decode("utf-8")
    OO000OOOO00OO0OOO=int(OO000OOOO00OO0OOO)
    O00000OO000OO00O0=SAVE_[O00O00O0OOO0OOO00]
    O00000OO000OO00O0=O00000OO000OO00O0.decode("utf-8")
    if O00000OO000OO00O0.isdigit():
        O00000OO000OO00O0=int(O00000OO000OO00O0)
    else:
        O00000OO000OO00O0=SAVE_[O00000OO000OO00O0]
    OO00OOOO00O000OOO=SAVE_[OO0O000O00O0000O0]
    OO00OOOO00O000OOO=OO00OOOO00O000OOO.decode("utf-8")
    if OO00OOOO00O000OOO.isdigit():
        OO00OOOO00O000OOO=int(OO00OOOO00O000OOO)
    else:
        OO00OOOO00O000OOO=SAVE_[OO00OOOO00O000OOO]

    print("COMPARE3", O00000OO000OO00O0, OO00OOOO00O000OOO)
    if O00000OO000OO00O0 >=OO00OOOO00O000OOO:
        SAVE_[OO00O0O0O00000OO0]=OO000OOOO00OO0OOO
    return


def JUMP(SAVE_):
    O0OOOOOO0OO0O0OOO=2001
    O0O0OOOO0OOO0OO00=1000
    O0000OOO0000OO0O0=SAVE_[O0OOOOOO0OO0O0OOO]
    O0000OOO0000OO0O0=O0000OOO0000OO0O0.decode("utf-8")
    O0000OOO0000OO0O0=int(O0000OOO0000OO0O0)
    SAVE_[O0O0OOOO0OOO0OO00]=O0000OOO0000OO0O0
    return

def first_call(code, flag):
    SAVE=dict()


    SAVE[1000]=0

    SAVE[1001]=0

    SAVE["flag"]=flag

    OOO000O0O0OOO0OOO=0
    while OOO000O0O0OOO0OOO==0:
        PC=SAVE[1000] # Counter
        
        OP=code[PC] # get_first

        PC=PC+1

        XP=code[PC]

        PC=PC+1

        if 0<XP:
            O0OOOO00O0OOO00OO=code[PC]
            PC=PC+1
            O00OO00OOOOO000OO=PC
            OO00OOOOOOOOO00OO=PC+O0OOOO00O0OOO00OO
            OO0O000O00OOOOOO0=code[O00OO00OOOOO000OO:OO00OOOOOOOOO00OO]
            SAVE[2001]=OO0O000O00OOOOOO0
            PC=PC+O0OOOO00O0OOO00OO


        if 1<XP:
            OO000O00OO0O0O0O0=code[PC]
            PC=PC+1
            O0O0OOO000OOOOO00=PC
            OOOOO00000OOOO00O=PC+OO000O00OO0O0O0O0
            O0OO0O0OO0OO00000=code[O0O0OOO000OOOOO00:OOOOO00000OOOO00O]
            SAVE[2002]=O0OO0O0OO0OO00000
            PC=PC+OO000O00OO0O0O0O0


        if 2<XP:
            O0OOO0OOOOO0OOO0O=code[PC]
            PC=PC+1
            O0O00O0OOO00O00OO=PC
            OOO000000OO00O0OO=PC+O0OOO0OOOOO0OOO0O
            O000OO0OOOOOO0O00=code[O0O00O0OOO00O00OO:OOO000000OO00O0OO]
            SAVE[2003]=O000OO0OOOOOO0O00
            PC=PC+O0OOO0OOOOO0OOO0O

        if 3<XP:
            O00O00000OOOO00O0=code[PC]
            PC=PC+1
            OO00OOOOO00O000OO=PC
            O00OO00O0000O0000=PC+O00O00000OOOO00O0
            O000OOOOOOO00O0OO=code[OO00OOOOO00O000OO:O00OO00O0000O0000]
            SAVE[2004]=O000OOOOOOO00O0OO
            PC=PC+O00O00000OOOO00O0

        SAVE[1000]=PC

        if OP==0:
            SAVE_TO_INT(SAVE) # XP[ARGS0] = ARGS1
        elif OP==2:
            SAVE_DICT(SAVE)
        elif OP==8:
            JUMP_LEFT_GREATER_EQUAL(SAVE)
        elif OP==11:
            JUMP(SAVE)
        elif OP==34:
            GET_FLAG_BY_IDX(SAVE) # SAVE SOMETHING
        elif OP==41:
            CALL_PYTHON_FUNCTION(SAVE) # EVAL SOMETHING
        elif OP==44:
            O0O000000OO00O00O(SAVE) # EVAL SOMETHING
        elif OP==49:
            JUMP_RIGHT_GREATER(SAVE)
        elif OP==72:
            SAVE_EVAL_RETURN(SAVE) # SAVE SOMETHING
        elif OP==74:
            O00OO0000OO00OO0O(SAVE) # SAVE SOMETHING
        elif OP==81:
            JUMP_EQUAL(SAVE)
        elif OP==82:
            O0O000000OO0OOO0O(SAVE) # SAVE SOMETHING
        elif OP==91:
            JUMP_NOT_EQAUL(SAVE)
        elif OP==99:
            O0O0O0000O00OO00O(SAVE) # SAVE SOMETHING
        elif OP==102:
            PLUS(SAVE)
        elif OP==111:
            OR(SAVE)
        elif OP==131:
            AND(SAVE)
        elif OP==151:
            LSHIFT(SAVE)
        elif OP==171:
            RSHIFT(SAVE)
        elif OP==186:
            XOR_SAVE(SAVE)

        PC=SAVE[1000]
        if OP==74:
            OOO000O0O0OOO0OOO=1

    O00OO000OO0O0O0O0=SAVE[1001]

    print(SAVE['O0OOOO0000OO00OOOO0OO0O0O0OO000O0O00OO00OO0O000O0O0O00OOOO0000OOO000000O0OOO0OO00O0OOOO00OOOO0000OO00O0O00OO00OOO0OO00000O0000O00OO0O000O0O00OOOO'])
    # print(SAVE)
    return O00OO000OO0O0O0O0
